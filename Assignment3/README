================================================================================
Network Programming Assignment 1
Name : Priyesh Vakayil
================================================================================

The client connects to multiple servers and fetches a file from the servers 
simultaneously by spawning multiple threads. The server and client use UDP to 
communicate to each other.

================================================================================
Makefile and Installation
================================================================================

This Makefile generates two binaries namely "myserver" and "myclient". These
binaries are put in bin directory. The Makefile can generate both binaries
together and clean up. The corresponding make commands are: 
1) myserver : make server 
2) myclient : make client 
3) both : make all 
4) clobber/clean : make clean
5) install	: make all then install into bin directory

There is also a shell script to make and install. Execute ./run to let the script do the installation automatically

================================================================================
Internal Design 
================================================================================

The server and client transfers packets with a packet header inspired from the TFTP protocol header.

The header structure looks like this:

	|| TYPE || LENGTH || VALUE ||

Based on the type the value format changes.
The main types are declared as an enum type_t as:

FILENAME	- client sends requested filename to server	- send_filename()
QUERYINFO	- client queries file size from server		- send_query_info()
CHUNKINFO	- client sends file attributes like offset/size	- send_chunk_info()
FILESIZE	- server sends the size of the requested file	- send_file_status()
FILECHUNK	- server sends data from the file		- send_file_data()
FILEERROR	- When sending an error in the requested file	- send_file_status() 
SENDACK		- When sending an ack to each other		- send_syn_ack()

Server Design :

The server reads the packet header from clients and based on types handles them.
The three services the server provides are:
1) getting filename from a client
2) sending file size to a client
3) sending file data based on clients request of offset and size

The packet header is stored in the following structure :

typedef struct tlv_s {
	type_t buf_type;
	size_t buf_len;
	int    buf_err;
	union {
		off_t filesize; // For FILESIZE
		chunkinfo_t chunkinfo; // For CHUNKINFO
		filechunk_t filechunk; // For FILECHUNK
		char *errorstr; // For FILERROR
		char *filename; // For FILENAME
	}bufval_t;
}tlv_t;

Client Design :

Client follows the following state machine :
1) Validate address and port provided by the user. 
2) It maintains a list of available servers.
3) Gets filename from user and send it to all available servers.
4) Get file status from first available server
5) Calculate number of threads to be created and the chunk size 
	and offset required for each thread
6) Spawn the threads and write to a file.

================================================================================
Testcases :
================================================================================

1) Normal working as shown in the sample output below. 
2) I tested for concurrent server accessed by multiple clients.
3) I tested for packet loss, the client detects packet loss and retransmits, 
	a) to enable retransmission set globi = anypacket;
	b) modify send_file_data() - 4 commented lines refering globi 
4) The above 2 points usually work, but I haven't considered unordered packets.
If by any chance the packets come unordered then there will be a diff in the files.
Also for rigourous testing I have put the packet size as just 10 bytes. Thus, there
are high chances of packets coming unoredered for large files. Please see "Known Bugs"
section.
 
Normal working :
4 servers run:
$ ./server 3456
$ ./server 7453
$ ./server 3452


MyLaptop:$cat server-info.text 
127.0.0.1 3456
127.0.0.1 3457
127.0.0.1 3458
127.0.0.1 3459

MyLaptop:$./client server-info.text 4
reading file ...
Connecting to available servers...(connect might take 1 sec) 
sent ack to 127.0.0.1:32781 ... 
Success : Connected to address:port 127.0.0.1:3456 
sent ack to 127.0.0.1:33037 ... 
Success : Connected to address:port 127.0.0.1:3457 
sent ack to 127.0.0.1:33293 ... 
Success : Connected to address:port 127.0.0.1:3458 
sent ack to 127.0.0.1:33549 ... 
Error : Could not connect to address:port 127.0.0.1:3459 
> Print the filename you want to download?(exit to quit)
>aaa
sent filename to  127.0.0.1:3456 ... 
sent filename to  127.0.0.1:3457 ... 
sent filename to  127.0.0.1:3458 ... 
getting file status ... 
sent chunkinfo to  127.0.0.1:3456 ... 
Sorry only 3 servers available 

Thread 0 writing from offset 0 till 30 
Read packet 1 from 0 to 10 from 127.0.0.1:3456
Read packet 2 from 10 to 20 from 127.0.0.1:3456
Read packet 3 from 20 to 30 from 127.0.0.1:3456

Thread 1 writing from offset 30 till 58 
Read packet 1 from 30 to 40 from 127.0.0.1:3457
Read packet 2 from 40 to 50 from 127.0.0.1:3457
Read packet 3 from 50 to 58 from 127.0.0.1:3457

Thread 2 writing from offset 58 till 86 
Read packet 1 from 58 to 68 from 127.0.0.1:3458
Read packet 2 from 68 to 78 from 127.0.0.1:3458
Read packet 3 from 78 to 86 from 127.0.0.1:3458
MyLaptop:$

MyLaptop:$./server 3456
got type 6 from 127.0.0.1:39307...
sent ack to 127.0.0.1:39307 ... 
got type 0 from 127.0.0.1:39307...
got type 1 from 127.0.0.1:39307...
sending file size: size 86
got type 3 from 127.0.0.1:39307...
getting chunk info ... 
sending from offset 0 to 30 from file aaa ...
sent packet 1 from 0 to 10 to 127.0.0.1:39307...
sent packet 2 from 10 to 20 to 127.0.0.1:39307...
sent packet 3 from 20 to 30 to 127.0.0.1:39307...

MyLaptop:$./server 3457
got type 6 from 127.0.0.1:39307...
sent ack to 127.0.0.1:39307 ... 
got type 0 from 127.0.0.1:39307...
got type 3 from 127.0.0.1:39307...
getting chunk info ... 
sending from offset 30 to 58 from file aaa ...
sent packet 1 from 30 to 40 to 127.0.0.1:39307...
sent packet 2 from 40 to 50 to 127.0.0.1:39307...
sent packet 3 from 50 to 58 to 127.0.0.1:39307...

MyLaptop:$./server 3458
got type 6 from 127.0.0.1:39307...
sent ack to 127.0.0.1:39307 ... 
got type 0 from 127.0.0.1:39307...
got type 3 from 127.0.0.1:39307...
getting chunk info ... 
sending from offset 58 to 86 from file aaa ...
sent packet 1 from 58 to 68 to 127.0.0.1:39307...
sent packet 2 from 68 to 78 to 127.0.0.1:39307...
sent packet 3 from 78 to 86 to 127.0.0.1:39307...

MyLaptop:$diff aaa ../server/aaa 
MyLaptop:$
 
================================================================================
Handling Errors
================================================================================

Wherever possible APIs from "unp.h" is used. These APIs are written to handle 
errors gracefully. If the program uses a system call that doesn't have a 
corresponding API in "unp.h", then errors are explicitly handled. The
server code handles misbehaving clients, and doesn't crash no matter what the
client tries to do. 

***
Due to lack of time there are some error conditions not taken care of. Known bugs
are listed in the "Known Bugs" section
***

================================================================================
Known Bugs
================================================================================
1) Didn't run enough testcases with different serv-info.text files. Could be bugs
in them
2) I haven't handled unordered packets. If by chance the packets from the server
come unordered, then there will be diff in the files. I have code to detect unordered
packets though, but it just detects the first unordered packet and tries to retransmit 
it. Also, for rigourous testing I have put the packet size as just 10 bytes
#define MAXTXSIZE 10  (in common.h)
Thus, there are high chances of packets coming unoredered for large files. To reduce
the number of unordered packets, please increase this value.

================================================================================
List of files
================================================================================

Below are names of the source files and their functionality: 
lib/libunp.a :	This library is the library compiled from the "Unix Network
				Programming" book, it contains basic socket functions that
				handles errors well.  
head/unp.h   :	This file contains function declarations for the above library
src/client/Makefile   :	client Makefile 
src/client/client.c   :	client program's source
src/client/cliutil.c  : utility functions used by the client
src/client/cliutil.h  : client utility header file.
src/common/Makefile   :	common files Makefile 
src/common/common.h   :	function declarations used by both server and client
src/common/common.c   :	function definition used by both server and client
src/server/Makefile   :	Server make file
src/server/server.c   :	server program source
src/server/servutil.c : utility functions used by the server 
src/server/servutil.h : server utility header file 

